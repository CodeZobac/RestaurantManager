[project]
name = "restaurant-manager"
version = "0.1.0"
description = "Restaurant Reservations Manager - FastAPI Backend"
authors = [
    {name = "LuisBBandeira", email = "luisfilipebentobandeira@gmail.com"}
]
readme = "../README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    # Core Framework & ASGI
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    # Data Validation & Settings
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # Database & ORM
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    # HTTP Client & External APIs
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    # Telegram Bot Integration
    "python-telegram-bot>=20.7",
    # Email Service
    "fastapi-mail>=1.4.1",
    "jinja2>=3.1.2",
    # SMS Service (Twilio)
    "twilio>=8.10.0",
    # Background Jobs & Task Queue
    "celery>=5.3.0",
    "redis>=5.0.0",
    "apscheduler>=3.10.4",
    # Security & Authentication
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "bcrypt>=4.1.0",
    "python-multipart>=0.0.6",
    # Environment Configuration
    "python-decouple>=3.8",
    # Date & Time Handling
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    # Data Processing & Analytics
    "pandas>=2.1.0",
    "numpy>=1.26.0",
    # Production Server
    "gunicorn>=21.2.0",
    # Monitoring & Logging
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    # CORS & Middleware (built into FastAPI)
    "aiosqlite>=0.21.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    
    # Code Quality
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    
    # Development Tools
    "pre-commit>=3.5.0",
    "watchfiles>=0.21.0",
    
    # Database Testing
    "pytest-postgresql>=5.0.0",
    "factory-boy>=3.3.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
]

prod = [
    "gunicorn>=21.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
known_first_party = ["app"]
