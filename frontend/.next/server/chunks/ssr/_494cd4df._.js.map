{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/cabozzz/dev/RestaurantManager/frontend/i18n/routing.ts"],"sourcesContent":["import {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // A list of all locales that are supported\n  locales: ['en', 'pt'],\n\n  // Used when no locale matches\n  defaultLocale: 'en'\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,2CAA2C;IAC3C,SAAS;QAAC;QAAM;KAAK;IAErB,8BAA8B;IAC9B,eAAe;AACjB","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///home/cabozzz/dev/RestaurantManager/frontend/i18n/request.ts"],"sourcesContent":["import {getRequestConfig} from 'next-intl/server';\nimport {hasLocale} from 'next-intl';\nimport {routing} from './routing';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n  // Typically corresponds to the `[locale]` segment\n  const requested = await requestLocale;\n  const locale = hasLocale(routing.locales, requested)\n    ? requested\n    : routing.defaultLocale;\n\n  return {\n    locale,\n    messages: (await import(`../messages/${locale}.json`)).default\n  };\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;uCAEe,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAC,aAAa,EAAC;IACpD,kDAAkD;IAClD,MAAM,YAAY,MAAM;IACxB,MAAM,SAAS,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,+GAAA,CAAA,UAAO,CAAC,OAAO,EAAE,aACtC,YACA,+GAAA,CAAA,UAAO,CAAC,aAAa;IAEzB,OAAO;QACL;QACA,UAAU,CAAC;;;;;;;;;kBAAa,CAAC,YAAY,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IAChE;AACF","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/cabozzz/dev/RestaurantManager/frontend/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import {NextIntlClientProvider, hasLocale} from 'next-intl';\nimport {notFound} from 'next/navigation';\nimport {setRequestLocale} from 'next-intl/server';\nimport {routing} from '@/i18n/routing';\n\nexport function generateStaticParams() {\n  return routing.locales.map((locale: string) => ({locale}));\n}\n\nexport default async function LocaleLayout({\n  children,\n  params\n}: {\n  children: React.ReactNode;\n  params: Promise<{locale: string}>;\n}) {\n  // Ensure that the incoming `locale` is valid\n  const {locale} = await params;\n  if (!hasLocale(routing.locales, locale)) {\n    notFound();\n  }\n\n  // Enable static rendering\n  setRequestLocale(locale);\n\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider>{children}</NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAEO,SAAS;IACd,OAAO,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,SAAmB,CAAC;YAAC;QAAM,CAAC;AAC1D;AAEe,eAAe,aAAa,EACzC,QAAQ,EACR,MAAM,EAIP;IACC,6CAA6C;IAC7C,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM;IACvB,IAAI,CAAC,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,+GAAA,CAAA,UAAO,CAAC,OAAO,EAAE,SAAS;QACvC,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,0BAA0B;IAC1B,CAAA,GAAA,2QAAA,CAAA,mBAAgB,AAAD,EAAE;IAEjB,qBACE,8OAAC;QAAK,MAAM;kBACV,cAAA,8OAAC;sBACC,cAAA,8OAAC,kQAAA,CAAA,yBAAsB;0BAAE;;;;;;;;;;;;;;;;AAIjC","debugId":null}}]
}